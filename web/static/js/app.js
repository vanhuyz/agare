// Brunch automatically concatenates all files in your
// watched paths. Those paths can be configured at
// config.paths.watched in "brunch-config.js".
//
// However, those files will only be executed if
// explicitly imported. The only exception are files
// in vendor, which are never wrapped in imports and
// therefore are always executed.

// Import dependencies
//
// If you no longer want to use a dependency, remember
// to also remove its path from "config.paths.watched".
import "phoenix_html"

// Import local files
//
// Local files can be imported directly using relative
// paths "./socket" or full ones "web/static/js/socket".

// import socket from "./socket"

import $ from "jquery"
import React from 'react'
import ReactDOM from 'react-dom'
import marked from 'marked'

// tutorial4.js
var Idea = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },
  render: function() {
    return (
      <div className="idea">
        <h2 className="ideaTitle">
          {this.props.title}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});


// tutorial1
var IdeaBox = React.createClass({
  loadIdeasFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleIdeaSubmit: function(idea) {
     var ideas = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    idea.id = Date.now();
    var newIdeas = ideas.concat([idea]);
    this.setState({data: newIdeas});
    // submit to the server and refresh the list
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: idea,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: ideas});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadIdeasFromServer();
    setInterval(this.loadIdeasFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="ideaBox">
        <h1>Ideas</h1>
        <IdeaList data={this.state.data} />
        <IdeaForm onIdeaSubmit={this.handleIdeaSubmit} />
      </div>
    );
  }
});

// tutorial2
var IdeaList = React.createClass({
  render: function() {
    var ideaNodes = this.props.data.map(function(idea) {
      return (
        <Idea title={idea.title} key={idea.id}>
          {idea.description}
          {idea.likes_count}
        </Idea>
      );
    });
    return (
      <div className="ideaList">
        {ideaNodes}
      </div>
    );
  }
});

var IdeaForm = React.createClass({
  getInitialState: function() {
    return {title: '', description: '', likes_count: ''};
  },
  handleTitleChange: function(e) {
    this.setState({title: e.target.value});
  },
  handleDescriptionChange: function(e) {
    this.setState({description: e.target.value});
  },
  handleLikesCountChange: function(e) {
    this.setState({likes_count: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var title = this.state.title.trim();
    var description = this.state.description.trim();
    var likes_count = this.state.likes_count;

    if (!description || !title || !likes_count) {
      return;
    }
    //  send request to the server
    this.props.onIdeaSubmit({idea: {title: title, description: description, likes_count: likes_count}});
    this.setState({title: '', description: '', likes_count: ''});
  },
  render: function() {
    return (
      <form className="ideaForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Title"
          value={this.state.title}
          onChange={this.handleTitleChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.description}
          onChange={this.handleDescriptionChange}
        />
        <input
          type="integer"
          value={this.state.likes_count}
          onChange={this.handleLikesCountChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});



ReactDOM.render(
  <IdeaBox url="/api/ideas" pollInterval={2000} />,
  document.getElementById('content')
);




